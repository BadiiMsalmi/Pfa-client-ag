/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createOffre } from '../fn/offre-emploi-controller/create-offre';
import { CreateOffre$Params } from '../fn/offre-emploi-controller/create-offre';
import { deleteOffre } from '../fn/offre-emploi-controller/delete-offre';
import { DeleteOffre$Params } from '../fn/offre-emploi-controller/delete-offre';
import { getAllOffres } from '../fn/offre-emploi-controller/get-all-offres';
import { GetAllOffres$Params } from '../fn/offre-emploi-controller/get-all-offres';
import { getAllOffresByRec } from '../fn/offre-emploi-controller/get-all-offres-by-rec';
import { GetAllOffresByRec$Params } from '../fn/offre-emploi-controller/get-all-offres-by-rec';
import { getOffreById } from '../fn/offre-emploi-controller/get-offre-by-id';
import { GetOffreById$Params } from '../fn/offre-emploi-controller/get-offre-by-id';
import { OffreEmploi } from '../models/offre-emploi';
import { saveOffre } from '../fn/offre-emploi-controller/save-offre';
import { SaveOffre$Params } from '../fn/offre-emploi-controller/save-offre';
import { unsaveOffre } from '../fn/offre-emploi-controller/unsave-offre';
import { UnsaveOffre$Params } from '../fn/offre-emploi-controller/unsave-offre';
import { updateOffre } from '../fn/offre-emploi-controller/update-offre';
import { UpdateOffre$Params } from '../fn/offre-emploi-controller/update-offre';
import {OffreEmploiDto} from '../models/offre-emploi-dto';

@Injectable({ providedIn: 'root' })
export class OffreEmploiControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveOffre()` */
  static readonly SaveOffrePath = '/api/v1/offres/saveOffre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveOffre()` instead.
   *
   * This method doesn't expect any request body.
   */
  saveOffre$Response(params: SaveOffre$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return saveOffre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveOffre$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  saveOffre(params: SaveOffre$Params, context?: HttpContext): Observable<string> {
    return this.saveOffre$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `createOffre()` */
  static readonly CreateOffrePath = '/api/v1/offres/postOffre';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOffre()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOffre$Response(params: CreateOffre$Params, context?: HttpContext): Observable<StrictHttpResponse<OffreEmploi>> {
    return createOffre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOffre$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOffre(params: CreateOffre$Params, context?: HttpContext): Observable<OffreEmploi> {
    return this.createOffre$Response(params, context).pipe(
      map((r: StrictHttpResponse<OffreEmploi>): OffreEmploi => r.body)
    );
  }

  /** Path part for operation `updateOffre()` */
  static readonly UpdateOffrePath = '/api/v1/offres/updateoffre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateOffre()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateOffre$Response(params: UpdateOffre$Params, context?: HttpContext): Observable<StrictHttpResponse<OffreEmploi>> {
    return updateOffre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateOffre$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateOffre(params: UpdateOffre$Params, context?: HttpContext): Observable<OffreEmploi> {
    return this.updateOffre$Response(params, context).pipe(
      map((r: StrictHttpResponse<OffreEmploi>): OffreEmploi => r.body)
    );
  }

  /** Path part for operation `getOffreById()` */
  static readonly GetOffreByIdPath = '/api/v1/offres/trouverOffre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOffreById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOffreById$Response(params: {
    id: string | null
  }, context?: HttpContext | undefined): Observable<StrictHttpResponse<OffreEmploi>> {
    return getOffreById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOffreById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOffreById(params: { id: string | null }, context?: HttpContext): Observable<OffreEmploi> {
    return this.getOffreById$Response(params, context).pipe(
      map((r: StrictHttpResponse<OffreEmploi>): OffreEmploi => r.body)
    );
  }

  /** Path part for operation `getAllOffres()` */
  static readonly GetAllOffresPath = '/api/v1/offres/allOffres';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOffres()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOffres$Response(params?: GetAllOffres$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OffreEmploiDto>>> {
    return getAllOffres(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOffres$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOffres(params?: GetAllOffres$Params, context?: HttpContext): Observable<Array<OffreEmploiDto>> {
    return this.getAllOffres$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OffreEmploiDto>>): Array<OffreEmploiDto> => r.body)
    );
  }

  /** Path part for operation `getAllOffresByRec()` */
  static readonly GetAllOffresByRecPath = '/api/v1/offres/allOffresByRec/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOffresByRec()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOffresByRec$Response(params: GetAllOffresByRec$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OffreEmploi>>> {
    return getAllOffresByRec(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOffresByRec$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOffresByRec(params: GetAllOffresByRec$Params, context?: HttpContext): Observable<Array<OffreEmploi>> {
    return this.getAllOffresByRec$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OffreEmploi>>): Array<OffreEmploi> => r.body)
    );
  }

  /** Path part for operation `unsaveOffre()` */
  static readonly UnsaveOffrePath = '/api/v1/offres/unsaveOffre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unsaveOffre()` instead.
   *
   * This method doesn't expect any request body.
   */
  unsaveOffre$Response(params: UnsaveOffre$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return unsaveOffre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unsaveOffre$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unsaveOffre(params: UnsaveOffre$Params, context?: HttpContext): Observable<string> {
    return this.unsaveOffre$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `deleteOffre()` */
  static readonly DeleteOffrePath = '/api/v1/offres/deleteoffre/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOffre()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOffre$Response(params: DeleteOffre$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteOffre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOffre$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOffre(params: DeleteOffre$Params, context?: HttpContext): Observable<void> {
    return this.deleteOffre$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
