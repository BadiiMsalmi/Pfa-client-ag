/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewCompetence } from '../fn/administrateur-controller/add-new-competence';
import { AddNewCompetence$Params } from '../fn/administrateur-controller/add-new-competence';
import { Competence } from '../models/competence';
import { CompetenceDto } from '../models/competence-dto';
import { getAllCompetences } from '../fn/administrateur-controller/get-all-competences';
import { GetAllCompetences$Params } from '../fn/administrateur-controller/get-all-competences';

@Injectable({ providedIn: 'root' })
export class AdministrateurControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addNewCompetence()` */
  static readonly AddNewCompetencePath = '/api/v1/administrateur/competence/addNew';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewCompetence()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewCompetence$Response(params: AddNewCompetence$Params, context?: HttpContext): Observable<StrictHttpResponse<CompetenceDto>> {
    return addNewCompetence(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewCompetence$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewCompetence(params: AddNewCompetence$Params, context?: HttpContext): Observable<CompetenceDto> {
    return this.addNewCompetence$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompetenceDto>): CompetenceDto => r.body)
    );
  }

  /** Path part for operation `getAllCompetences()` */
  static readonly GetAllCompetencesPath = '/api/v1/administrateur/competence/getAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCompetences()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCompetences$Response(params?: GetAllCompetences$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Competence>>> {
    return getAllCompetences(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCompetences$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCompetences(params?: GetAllCompetences$Params, context?: HttpContext): Observable<Array<Competence>> {
    return this.getAllCompetences$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Competence>>): Array<Competence> => r.body)
    );
  }

}
